generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

plugin hooks {
  provider = '@zenstackhq/swr'
  output = "./src/lib/hooks"
}

model Content {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @default(auth().id)
  contentType String
  likes       Like[]
  @@delegate(contentType)

  // author has full access
  @@allow('all', auth() == author)

  // logged-in users can view published posts
  @@allow('read', auth() != null && published)
}

model Post extends Content {
  title String
}

model Image extends Content {
  url String
}

model Like {
  id        String  @id @default(cuid())
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String  @default(auth().id)
  content   Content @relation(fields: [contentId], references: [id])
  contentId String
  @@unique([authorId, contentId])

  // author has full access
  @@allow('create,delete', auth() == author)
  // logged-in users can view 
  @@allow('read', auth() != null)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String    @password @omit
  accounts      Account[]
  sessions      Session[]
  content       Content[]
  likes         Like[]

  // everyone can signup, and user profile is also publicly readable
  @@allow('create,read', true)

  // only the user can update or delete their own profile
  @@allow('update,delete', auth() == this)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
